const Product = require("../Models/ProductModel");
const cloudinary = require("../Config/Cloudinary"); // Cloudinary konfiqurasiyasÄ±
const fs = require("fs");

// âœ… MÉ™hsul Yarat (Cloudinary-É™ yÃ¼klÉ™ vÉ™ URL-lÉ™ri MongoDB-yÉ™ yaz)
exports.createProduct = async (req, res) => {
  try {
    const {
      name,
      category,
      brand,
      price,
      stock,
      description,
      colors,
      structureColor,
      material,
      size,
      discountPrice,
      isOnSale,
    } = req.body;

    // GÉ™rÉ™kli sahÉ™lÉ™ri yoxla
    if (!name || !category || !price || !req.files || req.files.length === 0) {
      return res
        .status(400)
        .json({ message: "Ad, kateqoriya, qiymÉ™t vÉ™ ÅŸÉ™killÉ™r mÃ¼tlÉ™qdir!" });
    }

    // ğŸ“Œ Cloudinary-É™ ÅŸÉ™killÉ™ri yÃ¼klÉ™
    const uploadedImages = [];
    for (const file of req.files) {
      const result = await cloudinary.uploader.upload(file.path, {
        folder: "products",
      });
      uploadedImages.push(result.secure_url);
      fs.unlinkSync(file.path); // ğŸ”¥ MÃ¼vÉ™qqÉ™ti faylÄ± sil
    }

    let discountPercent = 0;
    if (discountPrice > 0 && discountPrice < price) {
      discountPercent = ((price - discountPrice) / price) * 100;
    }

    // ğŸ“Œ Yeni mÉ™hsulu yarat vÉ™ MongoDB-yÉ™ yaz
    const newProduct = new Product({
      name,
      category,
      brand,
      price,
      stock,
      description,
      colors,
      structureColor,
      material,
      size,
      images: uploadedImages, // Cloudinary URL-lÉ™ri MongoDB-dÉ™ saxlanÄ±r
      discountPrice,
      discountPercent: discountPercent.toFixed(0) || 0,
      isOnSale: discountPercent > 0 && true,
    });

    await newProduct.save();

    return res.status(201).json({
      message: "MÉ™hsul uÄŸurla yaradÄ±ldÄ±",
      product: newProduct,
    });
  } catch (error) {
    console.error("Error uploading files:", error);
    res.status(500).json({ message: "Server xÉ™tasÄ±", error: error.message });
  }
};

// âœ… BÃ¼tÃ¼n MÉ™hsullarÄ± GÉ™tir
exports.getAllProducts = async (req, res) => {
  try {
    res.setHeader(
      "Access-Control-Allow-Origin",
      "https://furnite-ui.vercel.app"
    );
    res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
    res.setHeader(
      "Access-Control-Allow-Headers",
      "Content-Type, Authorization"
    );

    const products = await Product.find();
    return res.json(products);
  } catch (error) {
    res.status(500).json({ message: "Server xÉ™tasÄ±", error: error.message });
  }
};

exports.queryProducts = async (req, res) => {
  let { category } = req.query;
  let filter = {};

  if (category) {
    filter.category = category;
    const products = await Product.find(filter);
    res.json(products);
  }
};

// âœ… TÉ™k MÉ™hsulu ID ilÉ™ GÉ™tir
exports.getProductById = async (req, res) => {
  try {
    const productId = req.params.id;
    const product = await Product.findById(productId);

    if (!product) {
      return res.status(404).json({ message: "MÉ™hsul tapÄ±lmadÄ±!" });
    }

    return res.json(product);
  } catch (error) {
    res.status(500).json({ message: "Server xÉ™tasÄ±", error: error.message });
  }
};

// âœ… Populyar MÉ™hsulu ilÉ™ GÉ™tir
exports.getPopularProduct = async (req, res) => {
  try {
    const products = await Product.find({ isPopular: true });
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// âœ… Endirimli mÉ™hsulu gÉ™tir
exports.getSaleProduct = async (req, res) => {
  try {
    const saleProducts = await Product.find({ isOnSale: true });
    res.json(saleProducts);
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// âœ… MÉ™hsulu YenilÉ™
exports.updateProduct = async (req, res) => {
  try {
    const productId = req.params.id;
    const updateData = req.body;

    const updatedProduct = await Product.findByIdAndUpdate(
      productId,
      { $set: updateData }, // MÉ™lumatlarÄ± dÃ¼zgÃ¼n yenilÉ™
      { new: true, runValidators: true } // YenilÉ™nmiÅŸ mÉ™lumatlarÄ± qaytar, validasiyanÄ± iÅŸÉ™ sal
    );

    if (!updatedProduct) {
      return res.status(404).json({ message: "MÉ™hsul tapÄ±lmadÄ±!" });
    }

    return res.status(200).json({
      status: "success",
      message: "MÉ™hsul uÄŸurla yenilÉ™ndi",
      data: updatedProduct,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Server xÉ™tasÄ±", error: error.message });
  }
};

// âœ… MÉ™hsulu Sil
exports.deleteProduct = async (req, res) => {
  try {
    const id = req.params.id;
    const deletedProduct = await Product.findByIdAndDelete(id);

    if (!deletedProduct) {
      return res.status(404).json({ message: "MÉ™hsul tapÄ±lmadÄ±!" });
    }

    return res.status(200).json({ message: "MÉ™hsul uÄŸurla silindi!" });
  } catch (error) {
    console.log(error);
    return res
      .status(500)
      .json({ message: "Server xÉ™tasÄ±", error: error.message });
  }
};
